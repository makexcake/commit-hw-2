---
AWSTemplateFormatVersion: '2010-09-09'
Description: Terraform to CloudFormation conversion example

Parameters:
  EnvName:
    Type: String
    Description: Name of the environment
    Default: commit-hw-tf
  VpcCidrBlock:
    Type: String
    Description: CIDR block for the VPC
    Default: 10.10.0.0/16
  SubnetsCidr:
    Type: CommaDelimitedList
    Description: CIDR blocks for the private subnets
    Default: 10.10.10.0/24,10.10.11.0/24
  PubSubnetsCidr:
    Type: CommaDelimitedList
    Description: CIDR blocks for the public subnets
    Default: 10.10.20.0/24,10.10.21.0/24
  AvailabilityZones:
    Type: CommaDelimitedList
    Description: List of availability zones
    Default: eu-central-1a,eu-central-1b,eu-central-1c
  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro
  LinuxAmiId:
    Type: String
    Description: AMI ID for Linux instances
    Default: ami-0aea56f3589631913
  WindowsAmiId:
    Type: String
    Description: AMI ID for Windows instances
    Default: ami-02076a196031326b2
  ContainerImage:
    Type: String
    Description: Image for the container
    Default: makecake/homework-app:1.0
  ContainerName:
    Type: String
    Description: Name of the container
    Default: hommework-container
  CertificateArn:
    Type: String
    Description: ARN of the SSL certificate
    Default: arn:aws:acm:eu-central-1:528100219426:certificate/a24bff49-df38-4a21-b4fc-b62b66e69bde

Resources:
  VpcModule:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: https://s3.amazonaws.com/cloudformation-templates-us-east-1/vpc_two_azs.template
      Parameters:
        VpcCidrBlock: !Ref VpcCidrBlock
        SubnetsCidr: !Join [",", !Ref SubnetsCidr]
        PubSubnetsCidr: !Join [",", !Ref PubSubnetsCidr]
        AvailabilityZones: !Join [",", !Ref AvailabilityZones]
        EnvironmentName: !Ref EnvName

  LinuxEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LinuxAmiId
      SubnetId: !GetAtt VpcModule.Outputs.PrivateSubnetIds[0]
      AssociatePublicIpAddress: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvName}-linux-server'
        - Key: scheduled
          Value: 'true'

  WindowsEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref WindowsAmiId
      SubnetId: !GetAtt VpcModule.Outputs.PrivateSubnetIds[0]
      AssociatePublicIpAddress: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvName}-windows-server'
        - Key: scheduled
          Value: 'true'

  EventBridgeStartModule:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: https://s3.amazonaws.com/cloudformation-templates-us-east-1/AmazonCloudWatchEvents-Standalone.yml
      Parameters:
        EventRuleName: ec2-start
        Targets:
          - Arn: 'arn:aws:lambda:eu-central-1:528100219426:function:start-tagged-ec2'
            Id: 'lambda-cron-start'
            InputTransformer:
              InputPathsMap:
                job: "$.job"
              InputTemplate: '{"job":"cron-by-tod"}'
              InputTemplateS3Location: ''
              Input:
                - cron(00 13 ? * SUN-FRI *)
                - Asia/Jerusalem
                - 'arn:aws:lambda:eu-central-1:528100219426:function:start-tagged-ec2'
          - Arn: 'arn:aws:lambda:eu-central-1:528100219426:function:stop-tagged-ec2'
            Id: 'lambda-cron-stop'
            InputTransformer:
              InputPathsMap:
                job: "$.job"
              InputTemplate: '{"job":"cron-by-tod"}'
              InputTemplateS3Location: ''
              Input:
                - cron(30 13 ? * SUN-FRI *)
                - Asia/Jerusalem
                - 'arn:aws:lambda:eu-central-1:528100219426:function:stop-tagged-ec2'

  FargateModule:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: https://s3.amazonaws.com/cloudformation-templates-us-east-1/fargate-ecs.template
      Parameters:
        ClusterSize: '1'
        DesiredCount: '1'
        EnvironmentName: !Ref EnvName
        ContainerImage: !Ref ContainerImage
        ContainerName: !Ref ContainerName
        VpcId: !GetAtt VpcModule.Outputs.VpcId
        PublicSubnets: !GetAtt VpcModule.Outputs.PublicSubnetIds
        PrivateSubnets: !GetAtt VpcModule.Outputs.PrivateSubnetIds
        CertificateArn: !Ref CertificateArn
        HealthCheckGracePeriodSeconds: '60'
        LoadBalancerHTTPPort: '80'
        LoadBalancerHTTPSPort: '443'
        ContainerPort: '3000'
        Protocol: 'tcp'
        AssignPublicIp: true
        LBTargetGroupHealthCheckTimeout: '60'
        LBTargetGroupHealthCheckHealthyThreshold: '2'
        LBTargetGroupHealthCheckUnhealthyThreshold: '3'
        LBTargetGroupHealthCheckInterval: '120'

Outputs:
  LinuxEC2Instance:
    Value: !Ref LinuxEC2Instance
  WindowsEC2Instance:
    Value: !Ref WindowsEC2Instance
  FargateService:
    Value: !GetAtt FargateModule.Outputs.ServiceName
  LoadBalancerDNS:
    Value: !GetAtt FargateModule.Outputs.LoadBalancerDNS
